{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { getIcons, stringToIcon } from '@iconify/utils';\nconst IconifyVue = '@iconify/vue';\nlet iconCount = 0;\nexport default function (sources) {\n    const virtualModuleId = 'rollup-plugin-vue-iconify-offline';\n    const resolvedVirtualModuleId = '\\0' + virtualModuleId;\n    return {\n        name: 'rollup-plugin-vue-iconify-offline',\n        resolveId(id) {\n            if (id === virtualModuleId) {\n                return resolvedVirtualModuleId;\n            }\n            return null;\n        },\n        async load(id) {\n            if (id === resolvedVirtualModuleId) {\n                // if (!process) {\n                //   console.log('* 不是node环境*', process);\n                //   return null;\n                // }\n                // const iconSet = await createBundleTask(sources);\n                // return iconSet;\n                await createBundleTask(sources);\n            }\n            return null;\n        }\n    };\n}\nasync function createBundleTask(sources) {\n    let bundle = 'import { addCollection } from \\'' + IconifyVue + '\\';\\n\\n';\n    if (Array.isArray(sources.icons) && sources.icons.length) {\n        // Sort icons by prefix\n        const { iconMap, getIconSetPromises } = organizeIconsList(sources.icons);\n        const values = await Promise.allSettled(getIconSetPromises);\n        values.forEach((value) => {\n            if (value.status === 'fulfilled') {\n                const prefix = value.value.prefix;\n                const icons = iconMap.get(prefix);\n                const iconSetData = getIcons(value.value, icons);\n                if (iconSetData) {\n                    bundle += 'addCollection(' + JSON.stringify(iconSetData) + ');\\n';\n                    iconCount += icons.length;\n                }\n                else {\n                    throw new Error(`Cannot find required icons: ${icons.join(',')}`);\n                }\n            }\n            else {\n                throw new Error(`Cannot find required icons in @iconify/json: ${value.reason}`);\n            }\n        });\n    }\n    console.log(`\\nkanjian-iconify-offline-plugin work finished! handled ${iconCount} icons, bundle size: ${bundle.length} bytes\\n`);\n    // Save to file\n    return bundle;\n}\n/**\n * read icon json data from @iconify/json by prefix\n * @param prefix\n * @returns\n */\n// const getIconSet = (prefix: string) => {\n// const iconSet = JSON.parse(readFileSync(require.resolve(`@iconify/json/json/${prefix}.json`), 'utf-8')) as IconifyJSON;\n//   return iconSet;\n// };\nconst getIconSet = async (prefix) => {\n    const iconSet = await import(/* @vite-ignore */ `@iconify/json/json/${prefix}.json`);\n    console.log(`@iconify/json/json/${prefix}.json`, iconSet);\n    return iconSet;\n};\n/**\n * Sort icon names by prefix\n * @param icons\n * @returns icons\n */\nfunction organizeIconsList(icons) {\n    const iconMap = new Map();\n    const getIconSetPromises = [];\n    icons.forEach(icon => {\n        const item = stringToIcon(icon);\n        if (item) {\n            const prefix = item.prefix;\n            const name = item.name;\n            if (iconMap.has(prefix)) {\n                iconMap.set(prefix, [...iconMap.get(prefix), name]);\n            }\n            else {\n                iconMap.set(prefix, [name]);\n                getIconSetPromises.push(new Promise((resolve) => {\n                    getIconSet(prefix).then(iconSet => resolve(iconSet));\n                }));\n            }\n        }\n    });\n    return {\n        iconMap,\n        getIconSetPromises\n    };\n}\n//# sourceMappingURL=index.js.map"],"names":["getIcons","stringToIcon"],"mappings":"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"}